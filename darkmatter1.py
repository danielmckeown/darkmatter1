



###This program will extract data from the Illustris simulation
## and calculate the radial distribution of mass,etc
## using concentric radii 




###  Here I just do some basic initializations 

from scipy.stats import gaussian_kde
import pylab
import matplotlib.pyplot as plt
import h5py
import numpy as np
import requests
def get(path, params=None):
    # make HTTP GET request to path
    headers = {"api-key":"452a77edd4324ec835da440fc3fdc50b "}
    r9 = requests.get(path, params=params, headers=headers)

    # raise exception if response code is not HTTP SUCCESS (200)
    r9.raise_for_status()

    if r9.headers['content-type'] == 'application/json':
        return r9.json() # parse json responses automatically

    if 'content-disposition' in r9.headers:
        filename = r9.headers['content-disposition'].split("filename=")[1]
        with open(filename, 'wb') as f:
            f.write(r9.content)
        return filename # return the filename string

    



import requests
baseUrl = 'http://www.illustris-project.org/api/'
headers = {"api-key":"452a77edd4324ec835da440fc3fdc50b"}



##############################################
####MAIN PROGRAM STARTS HERE


############### This program will track the evolution of the contents of galaxies

########It contains loops which keep track of the url associated with each galaxy





##### it then takes this url and accesses all the data on it


###### in order to calculate the gas, dm,  and star radial density profiles

##### The program then finds power laws associated with these densities. 


#### input an initial id and redshift number. The id will become part of the url
###  This corresponding url contains all the information about each subhalo

### once an initial id is chosen, the loop will go to the next subhalo progenitor from 
## which the last halo evolved, so we can easily track the evolution. In this case
##   I have chosen an id and redshift that is at the very end of the halo evolution, very 
### near to present time, so only 2 halo profiles will be generated, but normally, I can go as far
### back as say snapshot 22  etc.   etc. and generate over 100 profiles for the dark
## matter, star, and gas densities of each galaxy and its corresponding progenitor

id = 22

url = "http://www.illustris-project.org/api/Illustris-2/snapshots/130/subhalos/" + str(id)
sub = get(url) # get json response of subhalo properties
print url
# prepare dict to hold result arrays

fields = ['snap','id','mass_gas','mass_stars','mass_dm','mass_bhs','len_stars','related']
r9 = {}
for field in fields:
	r9[field] = []



# Beginning of loop that runs over all the halos
nM = 0	
filename_list =([])
filename1_list = ([])
while sub['desc_sfid'] != -1:
	for field in fields:
		r9[field].append(sub[field])
		


		
	#print r['mass_stars']   # this is just an example of what I am actually doing here
# request the full subhalo details of the descendant by following the sublink URL
	s = r9['id'][nM]
	sub = get(sub['related']['sublink_descendant'])
	#print len(r['id'])

	t = r9['snap'][nM]
	url1 = "http://www.illustris-project.org/api/Illustris-2/snapshots/" + str(t) + "/subhalos/" + str(s)
	print url1
		
#### This next bit of code contains all the information about the specific redshift corresponding to each halo
###  given a value for t, the code picks out the proper redshift information so that the scale factor
### for each is correct	


	
	###### all the initialized code here
	id1 = s
	print id1
	if t == 19 :
		redshift = 18.789189562448097
		print redshift
	elif t == 20:
	
		redshift = 17.9630246045828
		print redshift
	elif t == 21:
		redshift = 17.0854527855627
		print redshift
	elif t ==  22:
		redshift = 16.248493279904903
	elif t ==  23 :
		redshift = 	15.450266628902101
	elif t ==  24 :
		redshift = 14.7634960164193
	elif t ==  25 :
		redshift = 14.0339921444525
	elif t ==  26 :
		redshift = 13.338248289848599
	elif t ==  27 :
		redshift = 12.6747021048037
	elif t ==  28 :
		redshift = 12.0418635439251
	elif t ==  29 :
		redshift = 11.49738795480349
	elif t ==  30 :
		redshift = 10.919033198155402
	elif t ==  31 :
		redshift = 10.367443572408702
	elif t ==  32 :
		redshift = 9.996590466186328
	elif t ==  33 :
		redshift = 9.84138043947183
	elif t ==  34 :
		redshift = 9.38877127194055
	elif t ==  35 :
		redshift = 9.00233985416247
	elif t ==  36 :
		redshift = 8.907999185598529
	elif t ==  37 :
		redshift = 8.44947629436874
	elif t ==  38 :
		redshift = 8.01217294886593
	elif t == 39 :
		redshift = 7.595107149871599
	elif t ==  40 :
		redshift = 7.23627606616736
	elif t ==  41 :
		redshift = 7.0054170455445295
	elif t == 42 :
		redshift = 6.855117262650801
	elif t ==  43 :
		redshift =  6.491597745667499
	elif t ==  44 :
		redshift = 6.14490120341637
	elif t ==  45 :
		redshift =  6.0107573988449
	elif t ==  46 :
		redshift = 5.846613747881871
	elif t ==  47 :
		redshift = 5.5297658079491
	
	elif t ==  48 :
		redshift = 5.227580973127339
	elif t == 49 :
		redshift =  4.99593346816462
	elif t ==  50 :
		redshift = 4.9393806634910105
	elif t ==  51 :
		redshift = 4.66451770247093
	elif t ==  52 :
		redshift = 4.42803373660555 
	elif t ==  53 :
		redshift =  4.17683491472647
	elif t ==  54 :
		redshift =  4.007945111465269
	elif t ==  55 :
		redshift =  3.93726108472758
	elif t == 56 :
		redshift =  3.70877426464224
	elif t ==  57 :
		redshift =  3.49086136926065
	elif t ==  58 :
		redshift =  3.28303305795652
	elif t ==  59 :
		redshift =  3.0848226358340103
	elif t ==  60 :
		redshift =  3.00813107163038
	elif t ==  61 :
		redshift =  2.89578500572743
	elif t ==  62 :
		redshift =  2.73314261731872
	elif t ==  63 :
		redshift =  2.57729027160189
	elif t ==  64 :
		redshift = 2.44422570455415
	elif t ==  65 :
		redshift = 2.31611074395689
	elif t ==  66 :
		redshift = 2.2079254723837
	elif t ==  67 :
		redshift = 2.10326965259577
	elif t ==  68 :
		redshift = 2.00202813925285
	elif t ==  69 :
		redshift = 	1.90408954353277	
	elif t ==  70 :
		redshift = 	1.82268925262035
	elif t ==  71:
		redshift = 	1.74357057433086
	elif t == 72:
		redshift = 	1.66666955611447
	elif t ==  73 :
		redshift = 	1.60423452207311
	elif t ==  74 :
		redshift = 	1.53123902915761
	elif t ==  75:
		redshift = 	 1.4719748452658
	elif t ==  76 :
		redshift = 	1.4140982203725199
	elif t == 77 :
		redshift = 	1.357576667403
	elif t ==  78 :
		redshift = 	1.30237845990597
	elif t ==  79 :
		redshift = 	1.2484726142451399
	elif t ==  80 :
		redshift = 	1.206258080781
	elif t ==  81 :
		redshift = 	1.1546027123602198
	elif t ==  82 :
		redshift = 	1.11415056376538
	elif t ==  83 :
		redshift = 	1.07445789454767
	elif t ==  84 :
		redshift = 	1.03551044566414
	elif t ==  85 :
		redshift = 	0.9972942257819399
	elif t ==  86 :
		redshift = 	0.987852810815766
	elif t ==  87 :
		redshift = 	0.950531351585033
	elif t ==  88 :
		redshift = 	0.923000816177909
	elif t ==  89 :
		redshift = 	0.886896937575248
	elif t ==  90 :
		redshift = 	0.8514709006246489
	elif t ==  91 :
		redshift = 	0.816709979011851
	elif t ==  92 :
		redshift = 	0.791068248946339
	elif t ==  93 :
		redshift = 	0.7574413726158531
	elif t ==  94 :
		redshift = 	0.732636182022312
	elif t ==  95 :
		redshift =  0.700106353718523	
	elif t ==  96 :
		redshift =  0.676110411213478
	elif t ==  97 :
		redshift = 	0.644641840684537
	elif t ==  98 :
		redshift = 	0.621428745242514
	elif t ==  99 :
		redshift = 	0.598543288187567
	elif t ==  100 :
		redshift = 	0.5759808451078869
	elif t ==  101 :
		redshift = 	0.546392183141022
	elif t ==  102 :
		redshift = 	 0.524565820433923
	elif t ==  103 :
		redshift = 	0.503047523244883
	elif t ==  104 :
		redshift = 	 0.48183294342095095	
	elif t == 105 :
		redshift = 	0.460917794180647	
	elif t ==  106 :
		redshift = 	 0.44029784924774296	
	elif t ==  107 :
		redshift = 	0.41996894199726703			
	elif t ==  108 :
		redshift = 	0.39992696461356303	
	elif t ==  109:
		redshift = 	0.380167867260239
	elif t ==  110:
		redshift = 	0.360687657261817
	elif t ==  111:
		redshift = 	0.34785384185817797	
	elif t ==  112:
		redshift = 	0.32882972420595397	
	elif t == 113:
		redshift = 	0.310074120127834	
	elif t ==  114:
		redshift = 	0.29158323972192396	
	elif t ==  115:
		redshift = 	 0.27335334657844	
	elif t ==  116:
		redshift = 	 0.261343256161012	
	elif t ==  117:
		redshift = 	0.24354018155467003	
	elif t ==  118:
		redshift = 	0.22598838626019802
	elif t == 119 :
		redshift = 	0.21442503551449502	
	elif t ==  120:
		redshift = 	0.19728418237600998	
	elif t ==  121:
		redshift = 	0.18038526170574898	
	elif t ==  122:
		redshift = 	0.16925203324361102	
	elif t ==  123:
		redshift = 	0.15274876890238098	
	elif t ==  124:
		redshift = 	0.141876203969562	
	elif t ==  125:
		redshift = 	0.125759332411261	
	elif t ==  126:
		redshift = 	0.10986994045882499	
	elif t ==  127:
		redshift = 	0.0994018026302219	
	elif t ==  128:
		redshift = 	0.0838844307974793	
	elif t ==  129:
		redshift = 	0.0736613846564387	
	elif t ==  130:
		redshift = 	0.058507322794513	
	elif t ==  131:
		redshift = 	0.048523629981805906	
	elif t ==  132:
		redshift = 	0.0337243718735154	
	elif t ==  133:
		redshift = 	0.0239744283827625
	elif t ==  134:
		redshift = 	0.00952166696794476	
	elif t ==  135:
		redshift = 	2.2204460492503099e-16	
	
	
	
	


	
########################### NORMAL method of SUMMING DM PARTICLES
	import pylab
	import matplotlib.pyplot as plt
	id1 = s
	
	params = {'dm':'Coordinates,SubfindDensity'}
	scale_factor = 1.0 / (1+redshift)          #IMPORTANT NEEDED FOR EACH REDSHIFT
	little_h = 0.704        #IMPORTANT NEEDED FOR EACH REDSHIFT
	sub1 = get(url1) # get json response of subhalo properties
	saved_filename = get(url1 + "/cutout.hdf5",params) # get and save HDF5 cutout file
	fields = ['snap','id','mass_gas','mass_stars','mass_dm','mass_bhs','len_stars']

	little_r = 0    
	big_r = 0.5   #units are kpc
	count = 0 
	radialdmmass_density =([])
	radialdmmass = ([])
	radialdm_distance = ([])
	# rr simply contains all the particle id's associated with the given shell
	
	while (count < 1):
		try:
		
			with h5py.File(saved_filename) as f:
			        dx1 = f['PartType1']['Coordinates'][:,0] - sub1['pos_x']
        			dy1 = f['PartType1']['Coordinates'][:,1] - sub1['pos_y']
        			dz1 = f['PartType1']['Coordinates'][:,2] - sub1['pos_z']
        			dens = np.log10(f['PartType1']['SubfindDensity'][:])
        #masses = f['PartType1']['SubfindDensity'][:]
    				print "number of dm particles"
        			rr1 = np.sqrt(dx1**2 + dy1**2 + dz1**2)
        			
        			rr1 *= scale_factor/little_h # ckpc/h -> physical kpc  IMPORTANT
        			rrr1 = sorted(rr1)
        			print len(sorted(rr1))
        			totaldm_masss = len(sorted(rr1)) * 0.0035271
        			
        			
        			##  Here iter variable is created
        			iter = len(rrr1) / (150) 
        			print iter
        			
        			remainder = len(rrr1) % (150)
        			#print remainder
        			outer_radius1 = ([])
        			volume = ([])
        			error = ([])			
        			coun = 0
        			
        			
        			while coun < iter:
        				
        				top50 = rrr1[:150]
        				
        				
        				error.insert(iter,np.sqrt(len(top50)))
        				
        				
        				# this inserts the last entry in the list top 50 to get the outer radius
        				outer_radius1.insert(coun,top50[149])
        				
        				totaldmmass = len(top50) *  0.0035271    # 0.0035271 is the mass of each dm particle in the simulation
        				#print "printing totaldmmass"
        				#print totaldmmass
        				
        				#volume.insert(coun,top50[49]**2 - volume[count]**2)  # units are kpc 
        				#print "now printing thing I am about to delete"
        				
        				#print rrr1[:150]
        				"now printing total particles"
        				#print rrr1
        				# was del rrr1[:50]
        				del rrr1[:150]
        				#print "printing new rrr"
        				#print rrr
        				
        				coun = coun + 1
        				#print outer_radius1
        			error.insert(iter,12.24744871391589)
        			
        			
        			print "now printing last radiii rrr1"
        			#print rrr1[remainder - 1]
        			#### now insert the last outer radii
        			outer_radius1.insert(iter,rrr1[remainder - 1])
        			
        			##### now insert the first outer radii
        			outer_radius1.insert(0,0)
        			#print "printing outer_radius of dark matters"
        			
        			     			
        			
        			darkmattermass_density = ([])
        			radial_distance1 = ([])
        			
        			
        			
        			#print "now printing outer radius"
        			#print outer_radius1 
        			m = 0
        			darkmass = ([])
        			while m < iter:
         				
         				#print "now printing totaldmmass"
         				#print totaldmmass
         				#print "outer"
         				#print outer_radius1	
        				
        				volume1 = (4.0/3.0)*3.14*((outer_radius1[m + 1])**3) - (4.0/3.0)*3.14*((outer_radius1[m])**3)
        				
        				density = totaldmmass / volume1
        				
        				darkmattermass_density.insert(m,density)
        				
        				radial_distance1.insert(m,outer_radius1[m + 1])	
        				
        				m = m + 1
        				darkmass.insert(m,totaldmmass)
        
    				lastmass = remainder * 0.0035271
        			radialdm_distance.insert(count,big_r)
        			 
        			volume2 = (4.0/3.0)*3.14*((outer_radius1[m + 1])**3) - (4.0/3.0)*3.14*((outer_radius1[m])**3)
        			final_density = lastmass / volume2
        			darkmattermass_density.insert(m,final_density)
        			
        			little_r = little_r + 0.5    
        			big_r = big_r + 0.5 #units are kpc
        			count = count + 1
					
		except KeyError:
			break

		" print type of darkmattermass density "
		
		
		print type(darkmattermass_density)
		
		
		y1 =  darkmattermass_density 
		
		
		
		r1 = outer_radius1
		
		
		print "NOWWWWW PRINTING LENGTHSSSSSSSSSSS"
		
		print len(r1)
		
		print len(r1)		
		
		

		

		
#  these two lists y11 and r11 are not really relevant to the fit, they are declared data that was 
# successfully fit whereas the actually data we try to fit comes from r1 and y1 above
# which is generated for each halo that is taken
		
		#y1 = [0.021965903131819051, 0.075168402989164287, 0.057904557358495687, 0.060832528111252455, 0.053956904881676371, 0.043777038529949158, 0.038769977360064115, 0.038182772347943775, 0.045457783582344452, 0.046742535685646486, 0.044243466552368181, 0.041116207302550459, 0.034708242986518131, 0.040115633277391205, 0.030121723605056383, 0.030137628947540154, 0.041097558585945979, 0.034148209186032674, 0.024694088729800032, 0.034176466963578248, 0.030535272215499214, 0.027354539972537367, 0.030586007746086705, 0.025987261520557973, 0.027487578396828277, 0.022528696288907975, 0.018134259807503161, 0.021767564523170826, 0.017048645017765974, 0.024351007564097648, 0.018623718241684205, 0.01815611096198742, 0.017149205230690846, 0.018037617656030357, 0.016699339878791325, 0.01442066044688827, 0.018429035278973008, 0.015586453673927388, 0.018823371794233316, 0.016171802344538386, 0.017263440549986783, 0.01931834045334745, 0.011824172047424161, 0.011428945005272022, 0.013183742987937307, 0.013034511599441419, 0.013614796268537148, 0.014089799779738817, 0.014086291249016902, 0.016815952718925765, 0.013266600798902769, 0.010691516582060703, 0.013366105288020623, 0.0095796532834932432, 0.011584600133744205, 0.011406941122476024, 0.013993060206789249, 0.010151543417494616, 0.0093752223043085028, 0.011256205918680135, 0.0079799224144896323, 0.0083996469025613696, 0.0089982998487768001, 0.011565385181128306, 0.0084411422292685785, 0.0071847291793153932, 0.011410329450381673, 0.008094085348012316, 0.0084432159439530412, 0.0076488288189780944, 0.01109435409105667, 0.0074824742455236034, 0.0080199036760904459, 0.0098876268578060537, 0.0077400891356881711, 0.0070218545265007598, 0.0085618556055573006, 0.0083725490841043086, 0.00653670977302288, 0.0067536184677220177, 0.0063819904881562469, 0.0063445336556319839, 0.0076654572822989157, 0.0075510550905469754, 0.0078249169778454239, 0.0060999180970648026, 0.0084721999954405786, 0.0075506238219822533, 0.0065598862222238739, 0.0064956602895407181, 0.0079676549012298974, 0.0058728648760001849, 0.0069173959640084857, 0.005978328474201813, 0.0060279519387078052, 0.0064553066552572981, 0.0046109957940304609, 0.0053690440399084124, 0.0056588145699030673, 0.0061004554130494118, 0.0048074959724567767, 0.006793515096231926, 0.006037317992117399, 0.006828111972260918, 0.0045842572829621507, 0.0056859397558892306, 0.0053725250010399524, 0.0056918825917037516, 0.0069268427381274714, 0.0056711681382274268, 0.0042556096802037697, 0.0049578023072367585, 0.0060581219232597521, 0.005122243922077138, 0.0055668099939025729, 0.0049843729754297751, 0.006935163380417937, 0.0058233622284141594, 0.0044491121242905976, 0.0051568513657083634, 0.0042712030035814063, 0.0042858312324483786, 0.0037847379278920026, 0.0036840470424556152, 0.0045616075157845926, 0.0041038680600923366, 0.00492694684694364, 0.0039039875590422654, 0.0040111361022841978, 0.0037893935729735018, 0.0047224823422758015, 0.0040109782163531456, 0.0044207547540468716, 0.0041727502621445927, 0.0041214049842016346, 0.0038419733701067337, 0.0039905574826595326, 0.0033063020245653993, 0.0044054843679333803, 0.0040861622319756687, 0.0036019215260578658, 0.0043620933819918566, 0.0036241046913591452, 0.0027506708510903616, 0.003924874433980788, 0.0036222186135960212, 0.0041148699723561576, 0.0033046148949501977, 0.0035501102045427243, 0.0032555721108105257, 0.0043232159284558374, 0.0030099360851426576, 0.0042593728490920579, 0.0028326223946173877, 0.0037115939321488308, 0.0034700180913490104, 0.0041728499225050326, 0.0029839348857699562, 0.0037816179844706922, 0.0032625512249183173, 0.0035793402988366168, 0.002594575119893962, 0.0028511043113541761, 0.0031725783960269258, 0.0035668381725106253, 0.0027501928621076581, 0.0030128937368871923, 0.0027514965148357326, 0.0026432650799542573, 0.0030786367626758236, 0.0036401370784275612, 0.0029502486321057895, 0.0037639316161944621, 0.0036031924405238312, 0.0039559397751580405, 0.0024263935607249615, 0.0035190079564085047, 0.0025314262269436685, 0.0029791013193761853, 0.0024013564092028265, 0.003196372659363479, 0.0027528280550270889, 0.0032653212961835441, 0.0038129076735148155, 0.0025774077997754146, 0.0019460559116101224, 0.0022414709979325749, 0.0033255106918105132, 0.003108686097940073, 0.0030464464147687683, 0.0020127666546119471, 0.0022489622539730346, 0.0024881265338612215, 0.0024283800217794224, 0.002132886591271197, 0.0022523838555238711, 0.0029169255979966655, 0.0019592637438131917, 0.0022375568105544225, 0.00231069597524755, 0.0027624610260168618, 0.0026352540293770026, 0.0028854364768951782, 0.002669084339592601, 0.0023551440886825405, 0.0020928496995723999, 0.0020589149761530991, 0.0023683061014893206, 0.0026742670496209286, 0.0022381652722218153, 0.0020828150174634179, 0.0021209822148810756, 0.0025304658207023515, 0.0026919238073571652, 0.0016241478321265476, 0.0024866643715041785, 0.0021723812941315023, 0.0024269106233743339, 0.0019837761467175539, 0.0022730772783227798, 0.0026366084515336919, 0.0018412994357338748, 0.0018478774137080541, 0.0017055928701854614, 0.0023312880157220668, 0.0018818579829942789, 0.0020381255594297326, 0.0020466924894119855, 0.002283690533617638, 0.0017064498937226496, 0.0019755957527856087, 0.0019549834894365889, 0.0021612105262564887, 0.0019323551246823918, 0.0023843086644706329, 0.001794476442421933, 0.0018609063061848625, 0.0018990283846348247, 0.0018790958840252236, 0.0021814886742425551, 0.001929814684321685, 0.0016152238032447446, 0.0022086954463360958, 0.0022937455199788371, 0.0015802217001761004, 0.0017511046166603242, 0.0025215773900038817, 0.0020098553505689923, 0.0019271793218708314, 0.001744305085853311, 0.0018508922326370197, 0.001737045319067128, 0.0018376643332023443, 0.0018356667306325646, 0.0018691508154850046, 0.0017258476865021533, 0.0017419285565330577, 0.0022171983974535446, 0.0017383834210975048, 0.0022991891569883733, 0.0017199151038294592, 0.0020108998719961056, 0.0018581934805963491, 0.0015982813964687125, 0.0017167018922598163, 0.0019813383924668954, 0.0015719529411231488, 0.0024293864575239393, 0.0015868655621944783, 0.0015849408556519655, 0.0019902392668340041, 0.0015251728842755161, 0.0012945000841725549, 0.0016532849983029183, 0.0016926656116573139, 0.0019067902763288728, 0.0016138409529001989, 0.0017609717542438775, 0.0017422501297843962, 0.0021999066300463443, 0.0014033148148285969, 0.0017053251431120753, 0.0014735742735302259, 0.0014053671018418325, 0.0015724725266192078, 0.0015366834445673418, 0.0012079882462855745, 0.0014863558397278786, 0.001663419681746434, 0.0017363353229780526, 0.0013182750520569417, 0.0015787045898942819, 0.001257016486313801, 0.0016045814568033331, 0.0016631391208764613, 0.0016015762076137523, 0.0017770742825910886, 0.0014489210603741524, 0.0014315399236273631, 0.0011655237756462563, 0.0015962726804700661, 0.0015278128036392545, 0.0014832022237846151, 0.0016394577201517288, 0.0015701876246867704, 0.0015881846965535122, 0.0012165085662161686, 0.0012181111189838827, 0.0014177160822036339, 0.00097787398095583629, 0.0016198803377571959, 0.0016142052362220619, 0.0020049349006552469, 0.0018595949930448363, 0.0014953002712169768, 0.0016089812391905016, 0.0011737482987168567, 0.00096345172836819718, 0.0014154273502486124, 0.0011833281681045899, 0.0014317818452080685, 0.0014199511204840347, 0.0012441582765403444, 0.0011268464223499455, 0.0012359657318029172, 0.0011921744663503544, 0.0012444681418725711, 0.0011548308186839064, 0.0013641019243137021, 0.0016227060565642121, 0.0011585808108937781, 0.0011083827240132432, 0.0012780315486198091, 0.0010439180875922445, 0.0011663006231781967, 0.0012134520893892517, 0.0014066449390067964, 0.0015698068843053386, 0.0011417116440963495, 0.0014275571553409457, 0.0015950343170291743, 0.0013582864575353872, 0.00093135359728248963, 0.00096883124947000202, 0.0010973793471722587, 0.0012611310455182426, 0.0011844544629330948, 0.0015053207001240222, 0.0010042903095008717, 0.0013880925056121843, 0.0013675156398588631, 0.0011934099398320484, 0.0011193652854836324, 0.0011161171282609204, 0.00099980628016330033, 0.0013857465552704149, 0.001041266447026097, 0.0012481815824611131, 0.00096368406348989262, 0.0013356891153074276, 0.0012639482860050905, 0.0015202059806369388, 0.00084264119648234589, 0.00082419053665547237, 0.0013019137917573875, 0.0010199660042739169, 0.0010250612058213253, 0.0013970234879905851, 0.0011869689877117547, 0.001208015605186484, 0.00085431486678614514, 0.0010895062192980462, 0.0010443524734863076, 0.0010606133323514009, 0.0010765163175299203, 0.0010020107803391418, 0.00093602284791952778, 0.0011797627415388299, 0.00089807744948823315, 0.00096198644569105249, 0.0010834669045835007, 0.00086850517038813686, 0.0010464570770750364, 0.00086608728833542225, 0.00081756597041151159, 0.00090721458237165008, 0.00077923418316523923, 0.00087754907759829707, 0.0010734690742703877, 0.0010717645619646996, 0.0010611613966302706, 0.00088841352476909255, 0.00069852950120291146, 0.00083603437269165666, 0.0011231899742701996, 0.0011532568457177726, 0.0011296940493304979, 0.0010477286135657476, 0.00084867865284014854, 0.00075877764959249772, 0.00093739256456093988, 0.0010557677530797836, 0.00091505116210441372, 0.00071255378779260762, 0.0010965568010444157, 0.0010492400596581923, 0.00078055847041497649, 0.0011042054045596282, 0.00085861430076497407, 0.00076200220609614548, 0.00092705299581660088, 0.00085056648629966056, 0.00076862094982380676, 0.00089507930847556151, 0.00069038249747995059, 0.00085658006522317507, 0.00093533951739486359, 0.00066826499688620988, 0.00087939453249060145, 0.0012927432531840855, 0.00085284246511711087, 0.00091165699195699642, 0.00081348098153201224, 0.00072793573987927111, 0.00083051136974320559, 0.00077790167264853605, 0.00080160356400215869, 0.00077333159085530602, 0.00065918058641777696, 0.00079283844272801476, 0.00083019137448664968, 0.00071123174356177053, 0.00068549002301565402, 0.00086831660230492246, 0.00066783463148847692, 0.00066748637687933201, 0.00079985218815539891, 0.00067462277278937551, 0.00059148203832451516, 0.00086225180930350612, 0.00088193086147467464, 0.00080534712233379998, 0.00094276561994008129, 0.00078969605888083141, 0.00071882736288656868, 0.00084899629498552242, 0.00074005156503948127, 0.00067656130129476301, 0.00081598296099959406, 0.00081590118786558329, 0.00075730691011686915, 0.0010709538525652401, 0.00099185345260427871, 0.00062285073889519632, 0.0005780322367614901, 0.00070485288686315264, 0.0006622736885534662, 0.0010067277197002291, 0.00072106135585546809, 0.00068282186936861086, 0.00055177251805726838, 0.00077997017023090148, 0.00071201862317132316, 0.00080800034172948836, 0.00080308625327431694, 0.00075389329388252915, 0.00071715371408890725, 0.00071275867368630007, 0.00069067066799632644, 0.00070272590656252998, 0.00064642559668294291, 0.00060038968484543817, 0.00067177509298478003, 0.00081024815016878166, 0.00076950533420583269, 0.00068145141195107548, 0.00063969344008937097, 0.00070457664885301054, 0.00055506364021363727, 0.00082736617609920256, 0.00069354258307150645, 0.00069314549130919942, 0.00064002948304979859, 0.00087326261607231369, 0.00062732812030491308, 0.00083871961702395865, 0.00078854533416281849, 0.00082417515211140422, 0.00064705662507316263, 0.0007974996549335718, 0.00060213293591631115, 0.00069725396081106851, 0.00060488844428212762, 0.00062256852922582971, 0.00068872065025189875, 0.00054310363118420545, 0.00067146234323122746, 0.00053700822719747205, 0.00089555582275905763, 0.00078261075343417485, 0.00083105854005728944, 0.00056145520118365284, 0.00060512798741823171, 0.00053817999465121844, 0.00073161859429777686, 0.00054699911053249185, 0.00050563483470004392, 0.00067782057998182807, 0.00055236573706925543, 0.00056302419506222697, 0.00049365103677525537, 0.00074068925134128307, 0.00060699588597934342, 0.0007995599142954869, 0.0006257188156434492, 0.0007534099690682444, 0.00061606431356182336, 0.00041161192345488232, 0.00062711165927875439, 0.00065500864557430842, 0.00063000756009155097, 0.0006542614402377685, 0.00064595277938508857, 0.00047939462222633741, 0.00056541300814819367, 0.00056233198856750412, 0.00053958029343541627, 0.00057544893286368235, 0.00069803998390331593, 0.0004615602462499355, 0.00059177310615592257, 0.00053144799039015324, 0.00062861419566210034, 0.00052416634551533537, 0.00055778430058580166, 0.0006048271580606485, 0.00092194506150909943, 0.00055742147289012409, 0.00052441252603726641, 0.00054826031171495415, 0.00049609297882499985, 0.00052336637840332012, 0.00050886096686671818, 0.00046872653699458762, 0.00055938575778217297, 0.0006514951621666243, 0.00046249621755619166, 0.00067092819979760402, 0.00045894122700954732, 0.00056582228426797603, 0.00067162647250991567, 0.00062260656998893024, 0.00059939101151000053, 0.00059103196816609645, 0.00069314454420043605, 0.00057458888943201058, 0.00046344756576373937, 0.00056391139970528455, 0.00054652149500696544, 0.00045616180183693698, 0.00072143578349792657, 0.00041972657043524091, 0.0004652295322602077, 0.00053352268109114294, 0.00057667623514305827, 0.000598275421314894, 0.00044678054457540905, 0.00047123863579306345, 0.00052897894969238456, 0.00057051676596008548, 0.00039640078056813816, 0.0004285104593867449, 0.00047884437333798702, 0.00044443758310470498, 0.00052408777947831047, 0.00046984482849680607, 0.00050730023639197308, 0.00049170513349340692, 0.00051342354728311482, 0.00041903472427386071, 0.00044834384541496126, 0.00036019102513846769, 0.000438877335302418, 0.00052565450001130717, 0.00044717930851325191, 0.00059711346756128377, 0.00041921049801677993, 0.00051650978712007621, 0.00051878681156943527, 0.00049178913937483846, 0.00057405682073088959, 0.00052801634738188364, 0.00054254420273244189, 0.00054781187757051652, 0.00038890398378329052, 0.00053956389474633536, 0.00050891774743938784, 0.0004699780815330549, 0.00051031756258189604, 0.00050749348140423855, 0.00045231065181425604, 0.00050851320433117431, 0.00041253232337581464, 0.00051050338609805602, 0.00033662220387560804, 0.00034380501655202747, 0.00048002686208122427, 0.00040355788692931984, 0.00041249638195047644, 0.00045473871690475301, 0.00041143546079714185, 0.00034368388085432975, 0.00049568364001316455, 0.0005711387651462221, 0.00043652585528755931, 0.00044539567627291881, 0.00052058714849886325, 0.00036007977353650597, 0.00048249396806539484, 0.0005418963435069754, 0.00045167975067217402, 0.00048977710047563643, 0.00051346407389690383, 0.00056023433398179822, 0.00036511108900891135, 0.00040628412263438922, 0.0005823928889330225, 0.00043816207881600854, 0.00050611144406802742, 0.00044500195990509594, 0.00047586210471250496, 0.00051462604726389052, 0.00040081668139835491, 0.00046249219813978036, 0.00049877008123046468, 0.00043092548296650828, 0.00046135154551934897, 0.00050772814805610214, 0.00059837702292468166, 0.0004578897696767897, 0.00041421701010002187, 0.00058191284326011199, 0.00053697646006927303, 0.0004178567037889603, 0.0004055528169452842, 0.00033929880499332729, 0.00040250633799743301, 0.00039075032376349771, 0.00048087473775912262, 0.00037583878284604529, 0.00040781456194507624, 0.00038409765164223298, 0.00047374807187418463, 0.00044749520249102353, 0.00039899748398676489, 0.00026030902747293714, 0.00032722541383197574, 0.00042261863448718668, 0.00054592112490118878, 0.0004398777947649789, 0.00043301668430709058, 0.00047117007078282549, 0.00040385536923977737, 0.00043877077572231928, 0.0003779198935844928, 0.00035923303029463684, 0.00042507566363497658, 0.00049986906709851751, 0.00045444140111986717, 0.00037464091933811619, 0.00033036269751710913, 0.00040247396382286969, 0.00040607117776512991, 0.00042984670629919752, 0.00042991586431013708, 0.00038319991059954306, 0.00035051607135937391, 0.0003668828183275577, 0.00038842368425966942, 0.00042246882560085147, 0.00039482633858760742, 0.00033961960571203813, 0.00029263558666683622, 0.00033406542478904908, 0.0004490362524980292, 0.0004356405275789992, 0.00056725943798905526, 0.00031304688693864003, 0.00034813927046994562, 0.00032317524940717388, 0.00037378652944915631, 0.0003675917748993649, 0.00035333944461669832, 0.00036526139712589117, 0.00039981889307855146, 0.00034583446597990499, 0.00035897516746401155, 0.00039410710556113182, 0.00028638235182789512, 0.00035285134508366271, 0.00037360395756521546, 0.00033846540161341937, 0.00040821802598246245, 0.00045502952769352106, 0.00038650725613549716, 0.00040324966245001764, 0.00031476626472677133, 0.00026948333622114933, 0.00039715488036915256, 0.00038394719978768698, 0.00036303304460256266, 0.00036409358388861916, 0.00026829307178677375, 0.000299283516582119, 0.00033350255244287558, 0.00034245709566354252, 0.0003119838068346174, 0.0004274327195864031, 0.00042017519462262271, 0.0003428016174021922, 0.00037531074707338396, 0.00043171730154189532, 0.00031996624694360671, 0.00039107459018694065, 0.00031836454266974835, 0.00051556358514873028, 0.0004216997877505571, 0.00042635714462460172, 0.00033109926646658719, 0.00029499929066756771, 0.00030159127736833704, 0.00033937245533780474, 0.00042793398326275797, 0.00033602926613454827, 0.000305391742045598, 0.00025879751968699213, 0.00032117389251863621, 0.00030572388661974245, 0.00036077742471566759, 0.00039958149514481418, 0.00029222726445100942, 0.00029034953811027202, 0.00040434406304170028, 0.0002927607244888182, 0.00031146856359215365, 0.00033299693381656288, 0.00028121530631436539, 0.00035466379175537433, 0.00036631035124361385, 0.00025861100668145845, 0.00033123852839808806, 0.00026970665745066605, 0.00026399069807716858, 0.00037278416286404823, 0.00025583384187881944, 0.0003421530114002946, 0.0003656246047744967, 0.00027833197010501703, 0.00037532898143551079, 0.000301359227626953, 0.00030467035379037682, 0.00037161212908298872, 0.00029732992067369959, 0.00026718351133178615, 0.00029333812561450304, 0.00025684698117472065, 0.00026299144182603124, 0.00035962279238681548, 0.00035188315561677548, 0.00030485908017819312, 0.00027128571876267163, 0.00025677841582238606, 0.00029796496563194453, 0.00033958694217449067, 0.00033779757456238349, 0.0004230435982149388, 0.0002699347230627163, 0.00033282283015231259, 0.00034349250685516183, 0.00029054894833352397, 0.00032730892489500472, 0.00033767836939712818, 0.00031688335880895982, 0.00027779556282410579, 0.00028136012392886259, 0.00034470716020154211, 0.00027496412735706239, 0.00030225081081114154, 0.00032030673726025319, 0.00039003011009894215, 0.00031566805847996616, 0.00024132651733514351, 0.00031538191050555951, 0.00027410388376380171, 0.00031635073805536451, 0.00031179713167001462, 0.00027055928837776185, 0.00030445255669567754, 0.00028299232819838316, 0.00029583964256657932, 0.00032837131276388363, 0.0002152316494413061, 0.00035836571469783561, 0.00028762372603116545, 0.00026593872355887467, 0.00031795227909077255, 0.00038370044606427439, 0.00029670188457932891, 0.00029203391634914405, 0.00022878984722488684, 0.0003647184484011723, 0.00031731523870452385, 0.00029559887104676878, 0.0002805875021873471, 0.00031147395253716985, 0.0002503488082776808, 0.00027247248684424119, 0.0002512333845337678, 0.00022487122581784364, 0.00024984607436046529, 0.00029048860950180828, 0.00025956364465729221, 0.00024514670097355228, 0.00024837488579111856, 0.00025423380154748277, -0.00047067851121139243]
		print "now printing type y11"
		
		
		filename = "darkmatterdensityhalo" + str(s) + "redshift" + str(t) + ".txt" 
		
		filename1 = "darkmatterradii" + str(s) + "redshift" + str(t) + ".txt"
		
		
		
		
			
		def format(value):
		
			return "%.18f" % value
		
		y2 = [format(x) for x in y1]
		
		del r1[0]
		
		print r1
		
		def formats(values):
		
			return "%.8f" % values	
		
		
		r2 = [formats(x) for x in r1]
		
		print y2
		print r2
		
		print "PROINTING NEXT LENSNSGTHS"
	
		
		print len(y2)
		print len(r2)
		print "now printing r2"
		
		#print r2
		#file.write(filename)
		#print y2
		import csv
		
		# Creating file for dm densities
		resultFile = open(filename,'wb')
		
		# Creating file for corresponding radii
		resultFile1 = open(filename1,'wb')
		
		
		wr = csv.writer(resultFile, dialect='excel')
		print "now printing ************************************* writerows"
		wr.writerows(y2)
		
		wr1 = csv.writer(resultFile1, dialect='excel')
		
		#resultfile.close()

		wr1.writerows(r2)
		
				
					



### This iterative portion here allows the whole process to run over again and again until the last progenitor is reached
	filename_list.insert(nM,filename)
	filename1_list.insert(nM,filename1)
	
	nM = nM + 1
	
	#print "now printing filename list"





# Finally, after this iterative process has produced all the necessary textfiles,
# produce a final text file containing the list of all the text files produced so that
# the non linear regression program can receive this list and know which text files to
# call when fitting the data.


#print filename_list
#print filename1_list

filename2 = "halos.txt"
filename3 = "radii.txt"
	
#######   Here I write filename_list to it's own text file which I will then import into regression so that I know which files to do regression on

data = open(filename2, "w")

for c in filename_list:
	data.write(c)

data.close()
	

data = open(filename3, "w")

for c in filename1_list:
	data.write(c)

data.close()

